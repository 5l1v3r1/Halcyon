/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package halcyon.ide;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import java.util.regex.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.TreePath;
import javax.swing.undo.UndoManager;
import org.fife.ui.autocomplete.*;
import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.rtextarea.*;

/**
 *
 * @author s4n7h0
 */
public class MainPanel extends javax.swing.JFrame {

    /**
     * Creates new form MainPanel
     */
    public MainPanel() {
        try {
            UIManager.setLookAndFeel(
                    "javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        //new MainPanel();
        initComponents();
        Toolkit tk = Toolkit.getDefaultToolkit();
        int xsize = (int) tk.getScreenSize().getWidth();
        int ysize = (int) tk.getScreenSize().getHeight();
        this.setSize(xsize, ysize);
        setIcon();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        Configure();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jFrame_Configure = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField_NPATH = new javax.swing.JTextField();
        jButton_editNmapPath = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField_NSEPATH = new javax.swing.JTextField();
        jButton_editNSEPath = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField_LIBPATH = new javax.swing.JTextField();
        jButton_editLibPath = new javax.swing.JButton();
        jButton_autoconfig = new javax.swing.JButton();
        jButton_applyConfig = new javax.swing.JButton();
        jButton_cancelConfig = new javax.swing.JButton();
        jButton_clearconfig = new javax.swing.JButton();
        jFileChooser1 = new javax.swing.JFileChooser();
        jFrame_NewProject = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea_NewNSEDesc = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jTextField_NewNSEAuthor = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jList_NewNSECateg = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTextField_NewNSEName = new javax.swing.JTextField();
        jButton_NewNSEBrowse = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jComboBox_NewNSEService = new javax.swing.JComboBox();
        jButton_NewCreate = new javax.swing.JButton();
        jButton_NewCancel = new javax.swing.JButton();
        jFrame_searchBox = new javax.swing.JFrame();
        jPanel5 = new javax.swing.JPanel();
        jCheckBox_matchcase = new javax.swing.JCheckBox();
        jCheckBox_regex = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField_searchItem = new javax.swing.JTextField();
        jButton_close = new javax.swing.JButton();
        jButton_FindNext = new javax.swing.JButton();
        jFrame_ScanOptions = new javax.swing.JFrame();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox_scriptargs = new javax.swing.JCheckBox();
        jTextField_scriptargs = new javax.swing.JTextField();
        jCheckBox_ptrace = new javax.swing.JCheckBox();
        jCheckBox_verbose = new javax.swing.JCheckBox();
        jCheckBox_debug = new javax.swing.JCheckBox();
        jRadioButton_scanTCP = new javax.swing.JRadioButton();
        jRadioButton_scanUDP = new javax.swing.JRadioButton();
        jButton_ApplyOptions = new javax.swing.JButton();
        jButton_CancelOptions = new javax.swing.JButton();
        buttonGroup_scanType = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem_closeWorkSpace = new javax.swing.JMenuItem();
        jMenuItem_closeAll = new javax.swing.JMenuItem();
        jFrame_About = new javax.swing.JFrame();
        jPanel11 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton_aboutCLOSE = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jButton_new = new javax.swing.JButton();
        jButton_open = new javax.swing.JButton();
        jButton_save = new javax.swing.JButton();
        jButton_print = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButton_cut = new javax.swing.JButton();
        jButton_copy = new javax.swing.JButton();
        jButton_paste = new javax.swing.JButton();
        jButton_undo = new javax.swing.JButton();
        jButton_find = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jButton_scan = new javax.swing.JButton();
        jButton_stop = new javax.swing.JButton();
        jToggleButton_options = new javax.swing.JToggleButton();
        jTextField_host = new javax.swing.JTextField();
        jTextField_port = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jButton_settings = new javax.swing.JButton();
        jButton_about = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel_Status = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jProgressBar_status = new javax.swing.JProgressBar();
        jSplitPane_workspace = new javax.swing.JSplitPane();
        jSplitPane_workpane = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree_NSE = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree_NSEDATA = new javax.swing.JTree();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTree_NSELIB = new javax.swing.JTree();
        jTabbedPane_workspace = new javax.swing.JTabbedPane();
        jPanel_status = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_output = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_New = new javax.swing.JMenuItem();
        jMenuItem_Open = new javax.swing.JMenuItem();
        jMenuItem_Save = new javax.swing.JMenuItem();
        jMenuItem_SaveAs = new javax.swing.JMenuItem();
        jMenuItem_Close = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_print = new javax.swing.JMenuItem();
        jMenuItem_Exit = new javax.swing.JMenuItem();
        jMenu_Edit = new javax.swing.JMenu();
        jMenuItem_cut = new javax.swing.JMenuItem();
        jMenuItem_copy = new javax.swing.JMenuItem();
        jMenuItem_paste = new javax.swing.JMenuItem();
        jMenuItem_undo = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_find = new javax.swing.JMenuItem();
        jMenu_Proj = new javax.swing.JMenu();
        jMenuItem_run = new javax.swing.JMenuItem();
        jMenuItem_stop = new javax.swing.JMenuItem();
        jMenu_codegen = new javax.swing.JMenu();
        jMenuItem_afpHelper = new javax.swing.JMenuItem();
        jMenuItem_bittorrent = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_bruteDriver = new javax.swing.JMenuItem();
        jMenuItem_bruteEngine = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem_CredToDB = new javax.swing.JMenuItem();
        jMenuItem_CredToCSV = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem_mssqlQ = new javax.swing.JMenuItem();
        jMenuItem_dhcp6 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem_dnsQ = new javax.swing.JMenuItem();
        jMenuItem_dnsBList = new javax.swing.JMenuItem();
        jMenuItem_dnssd = new javax.swing.JMenuItem();
        jMenuItem_drda = new javax.swing.JMenuItem();
        jMenuItem_EAP = new javax.swing.JMenuItem();
        jMenuItem_goip = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem_HTTPspider = new javax.swing.JMenuItem();
        jMenuItem_imap = new javax.swing.JMenuItem();
        jMenuItem_informix = new javax.swing.JMenuItem();
        jMenuItem_JDWP = new javax.swing.JMenuItem();
        jMenuItem_ncp = new javax.swing.JMenuItem();
        jMenuItem_openssl = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem_nrpc = new javax.swing.JMenuItem();
        jMenuItem_rpc = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem_socketConnSend = new javax.swing.JMenuItem();
        jMenuItem_tftp = new javax.swing.JMenuItem();
        jMenuItem_xamp = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_configure = new javax.swing.JMenuItem();
        jMenu_Help = new javax.swing.JMenu();
        jMenuItem_about = new javax.swing.JMenuItem();

        jFrame_Configure.setTitle("Configure");
        jFrame_Configure.setAlwaysOnTop(true);
        jFrame_Configure.setMinimumSize(new java.awt.Dimension(500, 230));
        jFrame_Configure.setPreferredSize(new java.awt.Dimension(500, 230));
        jFrame_Configure.setResizable(false);
        jFrame_Configure.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                jFrame_ConfigureWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        jFrame_Configure.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                jFrame_ConfigureWindowOpened(evt);
            }
        });

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 10, 0, 10, 0};
        jPanel1Layout.rowHeights = new int[] {0, 7, 0, 7, 0};
        jPanel1.setLayout(jPanel1Layout);

        jLabel2.setText("Nmap Path :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextField_NPATH.setEditable(false);
        jTextField_NPATH.setText(" ");
        jTextField_NPATH.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField_NPATHInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextField_NPATH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_NPATHActionPerformed(evt);
            }
        });
        jTextField_NPATH.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField_NPATHPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(jTextField_NPATH, gridBagConstraints);

        jButton_editNmapPath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/edit.gif"))); // NOI18N
        jButton_editNmapPath.setToolTipText("Edit");
        jButton_editNmapPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_editNmapPathActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jButton_editNmapPath, gridBagConstraints);

        jLabel3.setText("NSE Path :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jLabel3, gridBagConstraints);

        jTextField_NSEPATH.setEditable(false);
        jTextField_NSEPATH.setText(" ");
        jTextField_NSEPATH.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField_NSEPATHPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jTextField_NSEPATH, gridBagConstraints);

        jButton_editNSEPath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/edit.gif"))); // NOI18N
        jButton_editNSEPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_editNSEPathActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        jPanel1.add(jButton_editNSEPath, gridBagConstraints);

        jLabel5.setText("Lib Path :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jLabel5, gridBagConstraints);

        jTextField_LIBPATH.setEditable(false);
        jTextField_LIBPATH.setText(" ");
        jTextField_LIBPATH.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField_LIBPATHPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jTextField_LIBPATH, gridBagConstraints);

        jButton_editLibPath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/edit.gif"))); // NOI18N
        jButton_editLibPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_editLibPathActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        jPanel1.add(jButton_editLibPath, gridBagConstraints);

        jButton_autoconfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/refresh.gif"))); // NOI18N
        jButton_autoconfig.setText(" Auto Config");
        jButton_autoconfig.setToolTipText("Click here to auto configure");
        jButton_autoconfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_autoconfigActionPerformed(evt);
            }
        });

        jButton_applyConfig.setText("Apply");
        jButton_applyConfig.setEnabled(false);
        jButton_applyConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_applyConfigActionPerformed(evt);
            }
        });

        jButton_cancelConfig.setText("Cancel");
        jButton_cancelConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cancelConfigActionPerformed(evt);
            }
        });

        jButton_clearconfig.setText("Clear");
        jButton_clearconfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_clearconfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame_ConfigureLayout = new javax.swing.GroupLayout(jFrame_Configure.getContentPane());
        jFrame_Configure.getContentPane().setLayout(jFrame_ConfigureLayout);
        jFrame_ConfigureLayout.setHorizontalGroup(
            jFrame_ConfigureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame_ConfigureLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame_ConfigureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame_ConfigureLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jFrame_ConfigureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_autoconfig, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame_ConfigureLayout.createSequentialGroup()
                                .addComponent(jButton_applyConfig)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_clearconfig)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_cancelConfig)))))
                .addContainerGap())
        );
        jFrame_ConfigureLayout.setVerticalGroup(
            jFrame_ConfigureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame_ConfigureLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jButton_autoconfig)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrame_ConfigureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_cancelConfig)
                    .addComponent(jButton_applyConfig)
                    .addComponent(jButton_clearconfig))
                .addGap(0, 50, Short.MAX_VALUE))
        );

        jFrame_NewProject.setTitle("Create New Project");
        jFrame_NewProject.setAlwaysOnTop(true);
        jFrame_NewProject.setResizable(false);
        jFrame_NewProject.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                jFrame_NewProjectWindowOpened(evt);
            }
        });

        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.columnWidths = new int[] {0, 10, 0, 10, 0};
        jPanel2Layout.rowHeights = new int[] {0, 7, 0, 7, 0, 7, 0, 7, 0};
        jPanel2.setLayout(jPanel2Layout);

        jLabel4.setText("Script Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jLabel4, gridBagConstraints);

        jLabel6.setText("Description :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jLabel6, gridBagConstraints);

        jTextArea_NewNSEDesc.setColumns(20);
        jTextArea_NewNSEDesc.setRows(5);
        jScrollPane5.setViewportView(jTextArea_NewNSEDesc);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jScrollPane5, gridBagConstraints);

        jLabel7.setText("Author :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jLabel7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jTextField_NewNSEAuthor, gridBagConstraints);

        jLabel8.setText("Category :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jLabel8, gridBagConstraints);

        jList_NewNSECateg.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "auth", "broadcast", "brute", "default", "discovery", "dos", "exploit", "external", "fuzzer", "intrusive", "malware", "safe", "version", "vuln" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList_NewNSECateg.setSelectedIndex(3);
        jList_NewNSECateg.setVisibleRowCount(4);
        jScrollPane6.setViewportView(jList_NewNSECateg);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jScrollPane6, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTextField_NewNSEName.setEditable(false);
        jTextField_NewNSEName.setEnabled(false);

        jButton_NewNSEBrowse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/open.gif"))); // NOI18N
        jButton_NewNSEBrowse.setToolTipText("Locate folder and choose file name with extention");
        jButton_NewNSEBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_NewNSEBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField_NewNSEName, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_NewNSEBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_NewNSEBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextField_NewNSEName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel3.add(jPanel4, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jPanel3, gridBagConstraints);

        jLabel9.setText("Port/Service :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jLabel9, gridBagConstraints);

        jComboBox_NewNSEService.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "21/tcp FTP", "22/tcp SSH", "23/tcp Telnet", "25/tcp SMTP", "53/udp DNS", "69/udp TFTP", "79/udp Finger", "80/tcp HTTP", "123/udp NTP", "161/udp SNMP", "443/tcp HTTPS", "513/tcp login", "514/tcp shell", "1433/tcp MSSQL", "1521/tcp Oracle", "3306/tcp MySQL" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jComboBox_NewNSEService, gridBagConstraints);

        jButton_NewCreate.setText("Create");
        jButton_NewCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_NewCreateActionPerformed(evt);
            }
        });

        jButton_NewCancel.setText("Cancel");
        jButton_NewCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_NewCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame_NewProjectLayout = new javax.swing.GroupLayout(jFrame_NewProject.getContentPane());
        jFrame_NewProject.getContentPane().setLayout(jFrame_NewProjectLayout);
        jFrame_NewProjectLayout.setHorizontalGroup(
            jFrame_NewProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame_NewProjectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame_NewProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame_NewProjectLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton_NewCreate)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_NewCancel)))
                .addContainerGap())
        );
        jFrame_NewProjectLayout.setVerticalGroup(
            jFrame_NewProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame_NewProjectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jFrame_NewProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_NewCreate)
                    .addComponent(jButton_NewCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jFrame_searchBox.setTitle("Find");
        jFrame_searchBox.setAlwaysOnTop(true);
        jFrame_searchBox.setResizable(false);

        java.awt.GridBagLayout jPanel5Layout = new java.awt.GridBagLayout();
        jPanel5Layout.columnWidths = new int[] {0, 10, 0, 10, 0};
        jPanel5Layout.rowHeights = new int[] {0, 7, 0};
        jPanel5.setLayout(jPanel5Layout);

        jCheckBox_matchcase.setText("Match Case");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel5.add(jCheckBox_matchcase, gridBagConstraints);

        jCheckBox_regex.setText("Regex");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel5.add(jCheckBox_regex, gridBagConstraints);

        jLabel1.setText("Search For ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel5.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 120;
        jPanel5.add(jTextField_searchItem, gridBagConstraints);

        jButton_close.setText("Close");
        jButton_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_closeActionPerformed(evt);
            }
        });

        jButton_FindNext.setText("Find");
        jButton_FindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_FindNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame_searchBoxLayout = new javax.swing.GroupLayout(jFrame_searchBox.getContentPane());
        jFrame_searchBox.getContentPane().setLayout(jFrame_searchBoxLayout);
        jFrame_searchBoxLayout.setHorizontalGroup(
            jFrame_searchBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame_searchBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jFrame_searchBoxLayout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(jButton_FindNext)
                .addGap(18, 18, 18)
                .addComponent(jButton_close)
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jFrame_searchBoxLayout.setVerticalGroup(
            jFrame_searchBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame_searchBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jFrame_searchBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_FindNext)
                    .addComponent(jButton_close))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jFrame_ScanOptions.setTitle("Scanning Options");
        jFrame_ScanOptions.setAlwaysOnTop(true);

        java.awt.GridBagLayout jPanel6Layout = new java.awt.GridBagLayout();
        jPanel6Layout.columnWidths = new int[] {0, 10, 0, 10, 0};
        jPanel6Layout.rowHeights = new int[] {0, 7, 0, 7, 0};
        jPanel6.setLayout(jPanel6Layout);

        jCheckBox_scriptargs.setText("Script Arguments");
        jCheckBox_scriptargs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_scriptargsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel6.add(jCheckBox_scriptargs, gridBagConstraints);

        jTextField_scriptargs.setEditable(false);
        jTextField_scriptargs.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 130;
        jPanel6.add(jTextField_scriptargs, gridBagConstraints);

        jCheckBox_ptrace.setText("Packet Trace");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(jCheckBox_ptrace, gridBagConstraints);

        jCheckBox_verbose.setText("Verbose");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(jCheckBox_verbose, gridBagConstraints);

        jCheckBox_debug.setText("Debug");
        jCheckBox_debug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_debugActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(jCheckBox_debug, gridBagConstraints);

        buttonGroup_scanType.add(jRadioButton_scanTCP);
        jRadioButton_scanTCP.setSelected(true);
        jRadioButton_scanTCP.setText("TCP Scan");
        jRadioButton_scanTCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_scanTCPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(jRadioButton_scanTCP, gridBagConstraints);

        buttonGroup_scanType.add(jRadioButton_scanUDP);
        jRadioButton_scanUDP.setText("UDP Scan");
        jRadioButton_scanUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_scanUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(jRadioButton_scanUDP, gridBagConstraints);

        jButton_ApplyOptions.setText("Apply");
        jButton_ApplyOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ApplyOptionsActionPerformed(evt);
            }
        });

        jButton_CancelOptions.setText("Cancel");
        jButton_CancelOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelOptionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame_ScanOptionsLayout = new javax.swing.GroupLayout(jFrame_ScanOptions.getContentPane());
        jFrame_ScanOptions.getContentPane().setLayout(jFrame_ScanOptionsLayout);
        jFrame_ScanOptionsLayout.setHorizontalGroup(
            jFrame_ScanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame_ScanOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jFrame_ScanOptionsLayout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(jButton_ApplyOptions)
                .addGap(18, 18, 18)
                .addComponent(jButton_CancelOptions)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrame_ScanOptionsLayout.setVerticalGroup(
            jFrame_ScanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame_ScanOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jFrame_ScanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_ApplyOptions)
                    .addComponent(jButton_CancelOptions))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuItem_closeWorkSpace.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/x.gif"))); // NOI18N
        jMenuItem_closeWorkSpace.setText("Close");
        jMenuItem_closeWorkSpace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_closeWorkSpaceActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem_closeWorkSpace);

        jMenuItem_closeAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/x.gif"))); // NOI18N
        jMenuItem_closeAll.setText("Close All");
        jMenuItem_closeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_closeAllActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem_closeAll);

        jFrame_About.setTitle("About Halcyon");
        jFrame_About.setAlwaysOnTop(true);
        jFrame_About.setMinimumSize(new java.awt.Dimension(460, 425));
        jFrame_About.setResizable(false);

        java.awt.GridBagLayout jPanel11Layout = new java.awt.GridBagLayout();
        jPanel11Layout.columnWidths = new int[] {0};
        jPanel11Layout.rowHeights = new int[] {0, 7, 0, 7, 0};
        jPanel11.setLayout(jPanel11Layout);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/halcyon.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 122, 0, 122);
        jPanel11.add(jLabel12, gridBagConstraints);

        jLabel13.setText("<html> <center><p>Halcyon is the first unofficial IDE specifically focused on Nmap Script (NSE) Development. This idea of this research development was originated while writing custom Nmap Scripts repeatedly for during different enterprise penetration testing scenarios. Halcyon is free to use, java based application that can run on any operating system and also provides a wide list of features such as code intelligence, code builder, auto-completion, debugging and error correction options and also a bunch of other features like other development IDE(s) has. Halcyon was, is and will be a community project to give better development interface/environment to researchers and thus enhance the number of NSE writers in the information security community.\n<br>\nLicense: GNU General Public License v3.0 http://www.gnu.org/licenses/\n\n</p><br><br>\n<p>\nMore details : <a href=”http://halcyon-ide.org/”> halcyon-ide.org </a>\n</p>\n<center>\n</html>\n\n  \n");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel11.add(jLabel13, gridBagConstraints);

        jButton_aboutCLOSE.setText("CLOSE");
        jButton_aboutCLOSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_aboutCLOSEActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel11.add(jButton_aboutCLOSE, gridBagConstraints);

        javax.swing.GroupLayout jFrame_AboutLayout = new javax.swing.GroupLayout(jFrame_About.getContentPane());
        jFrame_About.getContentPane().setLayout(jFrame_AboutLayout);
        jFrame_AboutLayout.setHorizontalGroup(
            jFrame_AboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame_AboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrame_AboutLayout.setVerticalGroup(
            jFrame_AboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame_AboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Halcyon IDE 2.0");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton_new.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/new.gif"))); // NOI18N
        jButton_new.setToolTipText("New");
        jButton_new.setFocusable(false);
        jButton_new.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_new.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_newActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_new);

        jButton_open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/open.gif"))); // NOI18N
        jButton_open.setToolTipText("Open");
        jButton_open.setFocusable(false);
        jButton_open.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_open.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_openActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_open);

        jButton_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/save.gif"))); // NOI18N
        jButton_save.setToolTipText("Save");
        jButton_save.setFocusable(false);
        jButton_save.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_save.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_saveActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_save);

        jButton_print.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/print.gif"))); // NOI18N
        jButton_print.setToolTipText("Print");
        jButton_print.setFocusable(false);
        jButton_print.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_print.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_printActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_print);
        jToolBar1.add(jSeparator2);

        jButton_cut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/cut.png"))); // NOI18N
        jButton_cut.setToolTipText("Cut");
        jButton_cut.setFocusable(false);
        jButton_cut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_cut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cutActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_cut);

        jButton_copy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/copy.gif"))); // NOI18N
        jButton_copy.setToolTipText("Copy");
        jButton_copy.setFocusable(false);
        jButton_copy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_copy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_copyActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_copy);

        jButton_paste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/paste.gif"))); // NOI18N
        jButton_paste.setMnemonic(KeyEvent.VK_V);
        jButton_paste.setToolTipText("Paste");
        jButton_paste.setFocusable(false);
        jButton_paste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_paste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_pasteActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_paste);

        jButton_undo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/undo.gif"))); // NOI18N
        jButton_undo.setToolTipText("Undo");
        jButton_undo.setFocusable(false);
        jButton_undo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_undo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_undoActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_undo);

        jButton_find.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/search.gif"))); // NOI18N
        jButton_find.setToolTipText("Find");
        jButton_find.setFocusable(false);
        jButton_find.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_find.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_findActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_find);
        jToolBar1.add(jSeparator3);

        jButton_scan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/scan.gif"))); // NOI18N
        jButton_scan.setToolTipText("Run Scan");
        jButton_scan.setFocusable(false);
        jButton_scan.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_scan.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_scan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton_scanMousePressed(evt);
            }
        });
        jButton_scan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_scanActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_scan);

        jButton_stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/stop.gif"))); // NOI18N
        jButton_stop.setToolTipText("Stop Scan");
        jButton_stop.setFocusable(false);
        jButton_stop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_stop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_stopActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_stop);

        jToggleButton_options.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/options.gif"))); // NOI18N
        jToggleButton_options.setFocusable(false);
        jToggleButton_options.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton_options.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton_options.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton_optionsMouseClicked(evt);
            }
        });
        jToggleButton_options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_optionsActionPerformed(evt);
            }
        });
        jToggleButton_options.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jToggleButton_optionsPropertyChange(evt);
            }
        });
        jToolBar1.add(jToggleButton_options);

        jTextField_host.setText("scanme.nmap.org");
        jTextField_host.setMaximumSize(new java.awt.Dimension(200, 28));
        jToolBar1.add(jTextField_host);

        jTextField_port.setText("default");
        jTextField_port.setMaximumSize(new java.awt.Dimension(100, 28));
        jToolBar1.add(jTextField_port);
        jToolBar1.add(jSeparator4);

        jButton_settings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/settings.gif"))); // NOI18N
        jButton_settings.setToolTipText("Settings");
        jButton_settings.setFocusable(false);
        jButton_settings.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_settings.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_settingsActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_settings);

        jButton_about.setIcon(new javax.swing.ImageIcon(getClass().getResource("/halcyon/icons/faq.gif"))); // NOI18N
        jButton_about.setToolTipText("About Halcyon");
        jButton_about.setFocusable(false);
        jButton_about.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_about.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_aboutActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_about);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        jLabel_Status.setMaximumSize(new java.awt.Dimension(32767, 16));
        jToolBar2.add(jLabel_Status);
        jToolBar2.add(jSeparator5);

        jProgressBar_status.setMaximumSize(new java.awt.Dimension(100, 20));
        jProgressBar_status.setPreferredSize(new java.awt.Dimension(100, 20));
        jToolBar2.add(jProgressBar_status);

        jSplitPane_workspace.setDividerLocation(450);
        jSplitPane_workspace.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane_workspace.setOneTouchExpandable(true);

        jSplitPane_workpane.setDividerLocation(150);
        jSplitPane_workpane.setMinimumSize(new java.awt.Dimension(106, 173));
        jSplitPane_workpane.setOneTouchExpandable(true);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("!!! Error - Restart the application!!!");
        jTree_NSE.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree_NSE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree_NSEMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTree_NSE);

        jTabbedPane1.addTab("Nmap Scripts", jScrollPane2);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("!!! Error - Restart the application!!!");
        jTree_NSEDATA.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree_NSEDATA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree_NSEDATAMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTree_NSEDATA);

        jTabbedPane1.addTab("NSE Data", jScrollPane3);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("!!! Error - Restart the application!!!");
        jTree_NSELIB.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree_NSELIB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree_NSELIBMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTree_NSELIB);

        jTabbedPane1.addTab("Nmap Libraries", jScrollPane4);

        jSplitPane_workpane.setLeftComponent(jTabbedPane1);

        jTabbedPane_workspace.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane_workspaceStateChanged(evt);
            }
        });
        jTabbedPane_workspace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTabbedPane_workspaceMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTabbedPane_workspaceMouseReleased(evt);
            }
        });
        jSplitPane_workpane.setRightComponent(jTabbedPane_workspace);

        jSplitPane_workspace.setTopComponent(jSplitPane_workpane);

        jPanel_status.setMaximumSize(new java.awt.Dimension(32767, 50));
        jPanel_status.setPreferredSize(new java.awt.Dimension(575, 100));
        jPanel_status.setSize(new java.awt.Dimension(0, 250));
        jPanel_status.setLayout(new javax.swing.BoxLayout(jPanel_status, javax.swing.BoxLayout.LINE_AXIS));

        jTextArea_output.setEditable(false);
        jTextArea_output.setColumns(20);
        jTextArea_output.setRows(5);
        jScrollPane1.setViewportView(jTextArea_output);

        jPanel_status.add(jScrollPane1);

        jSplitPane_workspace.setBottomComponent(jPanel_status);

        jMenu_File.setText("File");

        jMenuItem_New.setText("New");
        jMenuItem_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_NewActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_New);

        jMenuItem_Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Open.setText("Open");
        jMenuItem_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OpenActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Open);

        jMenuItem_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Save.setText("Save");
        jMenuItem_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SaveActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Save);

        jMenuItem_SaveAs.setText("Save As..");
        jMenuItem_SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SaveAsActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_SaveAs);

        jMenuItem_Close.setText("Close");
        jMenuItem_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_CloseActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Close);
        jMenu_File.add(jSeparator1);

        jMenuItem_print.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_print.setText("Print");
        jMenuItem_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_printActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_print);

        jMenuItem_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Exit.setText("Exit");
        jMenuItem_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ExitActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Exit);

        jMenuBar1.add(jMenu_File);

        jMenu_Edit.setText("Edit");

        jMenuItem_cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_cut.setText("Cut");
        jMenuItem_cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_cutActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_cut);

        jMenuItem_copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_copy.setText("Copy");
        jMenuItem_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_copyActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_copy);

        jMenuItem_paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_paste.setText("Paste");
        jMenuItem_paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_pasteActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_paste);

        jMenuItem_undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_undo.setText("Undo");
        jMenuItem_undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_undoActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_undo);
        jMenu_Edit.add(jSeparator6);

        jMenuItem_find.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_find.setText("Find");
        jMenuItem_find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_findActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_find);

        jMenuBar1.add(jMenu_Edit);

        jMenu_Proj.setText("Project");

        jMenuItem_run.setText("Run");
        jMenuItem_run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_runActionPerformed(evt);
            }
        });
        jMenu_Proj.add(jMenuItem_run);

        jMenuItem_stop.setText("Stop");
        jMenuItem_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_stopActionPerformed(evt);
            }
        });
        jMenu_Proj.add(jMenuItem_stop);

        jMenu_codegen.setText("Code Generator");

        jMenuItem_afpHelper.setText("AFP Helper");
        jMenuItem_afpHelper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_afpHelperActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_afpHelper);

        jMenuItem_bittorrent.setText("Bittorrent");
        jMenuItem_bittorrent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_bittorrentActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_bittorrent);

        jMenu1.setText("Brute");

        jMenuItem_bruteDriver.setText("Driver");
        jMenuItem_bruteDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_bruteDriverActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_bruteDriver);

        jMenuItem_bruteEngine.setText("Engine");
        jMenuItem_bruteEngine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_bruteEngineActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_bruteEngine);

        jMenu_codegen.add(jMenu1);

        jMenu2.setText("Credentials");

        jMenuItem_CredToDB.setText("Store to DB");
        jMenuItem_CredToDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_CredToDBActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem_CredToDB);

        jMenuItem_CredToCSV.setText("Store to CSV");
        jMenuItem_CredToCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_CredToCSVActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem_CredToCSV);

        jMenu_codegen.add(jMenu2);

        jMenu3.setText("Database");

        jMenuItem_mssqlQ.setText("MSSQL Query");
        jMenuItem_mssqlQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_mssqlQActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem_mssqlQ);

        jMenu_codegen.add(jMenu3);

        jMenuItem_dhcp6.setText("DHCP6");
        jMenuItem_dhcp6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_dhcp6ActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_dhcp6);

        jMenu4.setText("DNS");

        jMenuItem_dnsQ.setText("Query");
        jMenuItem_dnsQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_dnsQActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_dnsQ);

        jMenuItem_dnsBList.setText("Blacklist");
        jMenuItem_dnsBList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_dnsBListActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_dnsBList);

        jMenuItem_dnssd.setText("Service Discovery");
        jMenuItem_dnssd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_dnssdActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_dnssd);

        jMenu_codegen.add(jMenu4);

        jMenuItem_drda.setText("DRDA");
        jMenuItem_drda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_drdaActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_drda);

        jMenuItem_EAP.setText("EAP");
        jMenuItem_EAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_EAPActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_EAP);

        jMenuItem_goip.setText("GoIP");
        jMenuItem_goip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_goipActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_goip);

        jMenu5.setText("HTTP");

        jMenuItem_HTTPspider.setText("Spider");
        jMenuItem_HTTPspider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_HTTPspiderActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem_HTTPspider);

        jMenu_codegen.add(jMenu5);

        jMenuItem_imap.setText("IMAP");
        jMenuItem_imap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_imapActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_imap);

        jMenuItem_informix.setText("Informix");
        jMenuItem_informix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_informixActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_informix);

        jMenuItem_JDWP.setText("JDWP");
        jMenuItem_JDWP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_JDWPActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_JDWP);

        jMenuItem_ncp.setText("NCP");
        jMenuItem_ncp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ncpActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_ncp);

        jMenuItem_openssl.setText("OpenSSL");
        jMenuItem_openssl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_opensslActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_openssl);

        jMenu6.setText("RPC");

        jMenuItem_nrpc.setText("NRPC");
        jMenuItem_nrpc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_nrpcActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem_nrpc);

        jMenuItem_rpc.setText("RPC");
        jMenuItem_rpc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_rpcActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem_rpc);

        jMenu_codegen.add(jMenu6);

        jMenu7.setText("Socket");

        jMenuItem_socketConnSend.setText("Connect and Send");
        jMenuItem_socketConnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_socketConnSendActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem_socketConnSend);

        jMenu_codegen.add(jMenu7);

        jMenuItem_tftp.setText("TFTP");
        jMenuItem_tftp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_tftpActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_tftp);

        jMenuItem_xamp.setText("XAMP");
        jMenuItem_xamp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_xampActionPerformed(evt);
            }
        });
        jMenu_codegen.add(jMenuItem_xamp);

        jMenu_Proj.add(jMenu_codegen);
        jMenu_Proj.add(jSeparator7);

        jMenuItem_configure.setText("Configure");
        jMenuItem_configure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_configureActionPerformed(evt);
            }
        });
        jMenu_Proj.add(jMenuItem_configure);

        jMenuBar1.add(jMenu_Proj);

        jMenu_Help.setText("Help");

        jMenuItem_about.setText("About");
        jMenuItem_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_aboutActionPerformed(evt);
            }
        });
        jMenu_Help.add(jMenuItem_about);

        jMenuBar1.add(jMenu_Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSplitPane_workspace, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane_workspace, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getAccessibleContext().setAccessibleDescription("Unofficial IDE for Nmap Script Development");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItem_ExitActionPerformed

    private void jButton_autoconfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_autoconfigActionPerformed
        // TODO add your handling code here:
        String npath ="", nse="", lib = "";
        boolean flag = false;
        try{ 
            
            //  detecting possible class paths depends on OS. 
            String os = System.getProperty("os.name");
            if(os.contains("Mac OS X")){
                // identifying common linux paths
                npath = "/usr/local/bin/nmap";
                nse = "/usr/local/share/nmap/scripts/";
                lib = "/usr/local/share/nmap/nselib/";
                flag = true;
            }else if(os.contains("Windows")){
                String p=null;
                // searching environment variables
                String path = System.getenv("PATH");
                String[] paths = path.split(";"); 
                for (String path1 : paths) {
                    if (path1.contains("Nmap") || path1.contains("nmap")) { 
                        //found class paths from environment variables.  
                        npath = path1+"\\nmap";
                        nse = path1+"\\scripts\\";
                        lib = path1+"\\nselib\\";
                        flag = true;
                    }
                }
                File f = new File(System.getenv("ProgramFiles")+"\\Nmap");
                if((new File(System.getenv("ProgramFiles")+"\\Nmap")).exists()){
                    p = System.getenv("ProgramFiles");
                }else if((new File(System.getenv("ProgramFiles(X86)")+"\\Nmap")).exists()){
                    p = System.getenv("ProgramFiles(X86)");
                }
                if(!p.isEmpty()){
                    npath = p+"\\Nmap\\nmap.exe";
                    nse = p+"\\Nmap\\scripts\\";
                    lib = p+"\\Nmap\\nselib\\";
                    flag = true;
                }  
            }else if(os.contains("Linux")){
                npath = "/usr/bin/nmap";
                nse = "/usr/share/nmap/scripts/";
                lib = "/usr/share/nmap/nselib/";
                flag = true;
            } 
            
            if(flag){
                File isNPATH = new File(npath);
                File isNSE = new File(nse);
                File isLIB = new File(lib);
                if(isNPATH.exists() && isNSE.exists() && isLIB.exists()){
                    jTextField_NPATH.setText(npath);
                    jTextField_NSEPATH.setText(nse);
                    jTextField_LIBPATH.setText(lib);
                    jButton_applyConfig.setEnabled(true);
                }else{
                   showMsg(jFrame_Configure,"Autoconfiguration failed because one or more files are not found or invalid. Please configure manually by clicking corresponding edit buttons.", "Warning", JOptionPane.PLAIN_MESSAGE);  
                } 
            }else{
                showMsg(jFrame_Configure,"Autoconfiguration failed. Please configure manually by clicking corresponding edit buttons.", "Warning", JOptionPane.PLAIN_MESSAGE);  
            }
         
        }catch(NullPointerException e){
            String error = "<html>Unable to find the nmap location.<br>Please configure it manually.</html>";
            int done = showMsg(jFrame_Configure,error, "Error !!",JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_jButton_autoconfigActionPerformed

    private void jButton_settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_settingsActionPerformed
        // TODO add your handling code here:
        jFrame_Configure.pack();
        jFrame_NewProject.setLocationRelativeTo(null);
        jFrame_Configure.setVisible(true);
    }//GEN-LAST:event_jButton_settingsActionPerformed

    private void jButton_cancelConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cancelConfigActionPerformed
        // TODO add your handling code here:
        if(jTextField_NPATH.getText().isEmpty() || jTextField_NSEPATH.getText().isEmpty()||jTextField_LIBPATH.getText().isEmpty()){
            int x = showMsg(jFrame_Configure,"Halcyon wont work as desired without proper configuration. You might encouters errors", "Error!", JOptionPane.OK_OPTION);
            if(x==JOptionPane.OK_OPTION){
                jFrame_Configure.setVisible(false);
            }
        }else{
            jFrame_Configure.setVisible(false);
        }
    }//GEN-LAST:event_jButton_cancelConfigActionPerformed

    private void jButton_editNmapPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_editNmapPathActionPerformed
        // TODO add your handling code here:
        jFileChooser1.setCurrentDirectory(new java.io.File("/"));
        jFileChooser1.setDialogTitle("Choose Nmap Executable");
        jFileChooser1.setFileSelectionMode(jFileChooser1.FILES_ONLY);
        jFileChooser1.setMultiSelectionEnabled(false);
        int option = jFileChooser1.showOpenDialog(jFrame_Configure);
        if(option == jFileChooser1.APPROVE_OPTION){
            File f = jFileChooser1.getSelectedFile();
            jTextField_NPATH.setText(f.getAbsolutePath()); 
        }
    }//GEN-LAST:event_jButton_editNmapPathActionPerformed

    private void jButton_applyConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_applyConfigActionPerformed
        // TODO add your handling code here:
        setProperties(jTextField_NPATH.getText(),jTextField_NSEPATH.getText(),jTextField_LIBPATH.getText());
        jFrame_Configure.setVisible(false);
    }//GEN-LAST:event_jButton_applyConfigActionPerformed

    private void jButton_clearconfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_clearconfigActionPerformed
        // TODO add your handling code here:
        jTextField_NPATH.setText("");
        jTextField_NSEPATH.setText("");
        jTextField_LIBPATH.setText("");
        jButton_applyConfig.setEnabled(false);
    }//GEN-LAST:event_jButton_clearconfigActionPerformed

    private void jMenuItem_configureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_configureActionPerformed
        // TODO add your handling code here:
        jFrame_Configure.setVisible(true);
    }//GEN-LAST:event_jMenuItem_configureActionPerformed

    private void jFrame_ConfigureWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jFrame_ConfigureWindowOpened
        // TODO add your handling code here:
        //load halcyon.settings
        loadSettings();
    }//GEN-LAST:event_jFrame_ConfigureWindowOpened

    private void jButton_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_newActionPerformed
        // TODO add your handling code here:
        jFrame_NewProject.pack();
        jFrame_NewProject.setLocationRelativeTo(null);
        jFrame_NewProject.setVisible(true);
    }//GEN-LAST:event_jButton_newActionPerformed

    private void jFrame_NewProjectWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jFrame_NewProjectWindowOpened
        // TODO add your handling code here: 
        jTextField_NewNSEAuthor.setText(System.getProperty("user.name"));
    }//GEN-LAST:event_jFrame_NewProjectWindowOpened

    private void jButton_NewCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_NewCreateActionPerformed
        // TODO add your handling code here:
        ScriptBuilder sb = new ScriptBuilder();
        sb.setTemplate(jTextField_NewNSEName.getText(), jTextArea_NewNSEDesc.getText(), jTextField_NewNSEAuthor.getText(), jComboBox_NewNSEService.getSelectedItem().toString(), jList_NewNSECateg.getSelectedValues());
        
        createNew(sb.createTemplate());
        jFrame_NewProject.dispose(); 
    }//GEN-LAST:event_jButton_NewCreateActionPerformed

    private void jButton_NewNSEBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_NewNSEBrowseActionPerformed
        // TODO add your handling code here:
        try{
            jFileChooser1.setCurrentDirectory(new java.io.File("/"));
            jFileChooser1.setDialogTitle("Save Script As");
            jFileChooser1.setMultiSelectionEnabled(false);
            int option = jFileChooser1.showSaveDialog(jFrame_NewProject);
            if(option == jFileChooser1.APPROVE_OPTION){
                File file = new File(jFileChooser1.getSelectedFile().getAbsolutePath());
                if(!file.exists()) file.createNewFile();
                hb.setFile(file);
                jTextField_NewNSEName.setText(file.getAbsolutePath());
            }
        }catch(Exception e){
            showMsg(jFrame_NewProject,"Can not save the file. Please check the file permission and try again.", "Cannot save file", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jButton_NewNSEBrowseActionPerformed

    private void jMenuItem_NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_NewActionPerformed
        // TODO add your handling code here:
        jFrame_NewProject.pack();
        jFrame_NewProject.setLocationRelativeTo(null);
        jFrame_NewProject.setVisible(true);
    }//GEN-LAST:event_jMenuItem_NewActionPerformed

    private void jButton_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_openActionPerformed
        // TODO add your handling code here:
        openScript();
    }//GEN-LAST:event_jButton_openActionPerformed

    private void jMenuItem_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_OpenActionPerformed
        // TODO add your handling code here:
        openScript();
    }//GEN-LAST:event_jMenuItem_OpenActionPerformed

    private void jMenuItem_CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_CloseActionPerformed
        // TODO add your handling code here:
        jTabbedPane_workspace.remove(jTabbedPane_workspace.getSelectedComponent());
    }//GEN-LAST:event_jMenuItem_CloseActionPerformed

    private void jTabbedPane_workspaceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane_workspaceStateChanged
        // TODO add your handling code here:
        if(jTabbedPane_workspace.getSelectedIndex()>-1){
            jLabel_Status.setText(jTabbedPane_workspace.getTitleAt(jTabbedPane_workspace.getSelectedIndex()));
            hb.setPath(jTabbedPane_workspace.getTitleAt(jTabbedPane_workspace.getSelectedIndex()));
        }
       
        
    }//GEN-LAST:event_jTabbedPane_workspaceStateChanged

    private void jMenuItem_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SaveActionPerformed
        // TODO add your handling code here:
        saveScript();
    }//GEN-LAST:event_jMenuItem_SaveActionPerformed

    private void jMenuItem_SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SaveAsActionPerformed
        // TODO add your handling code here:
        saveAS();
    }//GEN-LAST:event_jMenuItem_SaveAsActionPerformed

    private void jButton_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_saveActionPerformed
        // TODO add your handling code here:
        saveScript();
    }//GEN-LAST:event_jButton_saveActionPerformed

    private void jButton_cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cutActionPerformed
        // TODO add your handling code here:
        //jTabbedPane_workspace.getSelectedIndex()
        JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
        JTextArea area = (JTextArea)scroll.getViewport().getView();
        area.cut();
    }//GEN-LAST:event_jButton_cutActionPerformed

    private void jButton_pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_pasteActionPerformed
        // TODO add your handling code here:
        JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
        JTextArea area = (JTextArea)scroll.getViewport().getView();
        area.paste();
    }//GEN-LAST:event_jButton_pasteActionPerformed

    private void jButton_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_copyActionPerformed
        // TODO add your handling code here:
        JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
        JTextArea area = (JTextArea)scroll.getViewport().getView();
        area.copy();
    }//GEN-LAST:event_jButton_copyActionPerformed

    private void jButton_undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_undoActionPerformed
        // TODO add your handling code here:
        undoManager.undo();
    }//GEN-LAST:event_jButton_undoActionPerformed

    private void jMenuItem_cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_cutActionPerformed
        // TODO add your handling code here:
        JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
        JTextArea area = (JTextArea)scroll.getViewport().getView();
        area.cut();
    }//GEN-LAST:event_jMenuItem_cutActionPerformed

    private void jMenuItem_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_copyActionPerformed
        // TODO add your handling code here:
        JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
        JTextArea area = (JTextArea)scroll.getViewport().getView();
        area.copy();
    }//GEN-LAST:event_jMenuItem_copyActionPerformed

    private void jMenuItem_pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_pasteActionPerformed
        // TODO add your handling code here:
        JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
        JTextArea area = (JTextArea)scroll.getViewport().getView();
        area.paste();
    }//GEN-LAST:event_jMenuItem_pasteActionPerformed

    private void jMenuItem_undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_undoActionPerformed
        // TODO add your handling code here:
        undoManager.undo();
    }//GEN-LAST:event_jMenuItem_undoActionPerformed

    private void jButton_printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_printActionPerformed
        // TODO add your handling code here:
        printScript();
    }//GEN-LAST:event_jButton_printActionPerformed

    private void jMenuItem_printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_printActionPerformed
        // TODO add your handling code here:
        printScript();
    }//GEN-LAST:event_jMenuItem_printActionPerformed

    private void jButton_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_closeActionPerformed
        // TODO add your handling code here:
        jFrame_searchBox.setVisible(false);
    }//GEN-LAST:event_jButton_closeActionPerformed

    private void jButton_FindNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_FindNextActionPerformed
        // TODO add your handling code here:
        findText(true);
    }//GEN-LAST:event_jButton_FindNextActionPerformed

    private void jButton_findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_findActionPerformed
        // TODO add your handling code here:
        jFrame_searchBox.pack();
        jFrame_searchBox.setLocationRelativeTo(null);
        jFrame_searchBox.setVisible(true);
    }//GEN-LAST:event_jButton_findActionPerformed

    private void jCheckBox_scriptargsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_scriptargsActionPerformed
        // TODO add your handling code here:
        if(jCheckBox_scriptargs.isSelected()){
            jTextField_scriptargs.setEditable(true);
            jTextField_scriptargs.setEnabled(true);
        }else{
            jTextField_scriptargs.setEditable(false);
            jTextField_scriptargs.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox_scriptargsActionPerformed

    private void jToggleButton_optionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_optionsActionPerformed
        // TODO add your handling code here:
        hb.setIsOptions(((JToggleButton) evt.getSource()).isSelected());
        
    }//GEN-LAST:event_jToggleButton_optionsActionPerformed

    private void jToggleButton_optionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton_optionsMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()==2){
            jFrame_ScanOptions.pack();
            jFrame_ScanOptions.setLocationRelativeTo(null);
            jFrame_ScanOptions.setVisible(true);
        }
    }//GEN-LAST:event_jToggleButton_optionsMouseClicked

    private void jButton_ApplyOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ApplyOptionsActionPerformed
        // TODO add your handling code here:
        setOptions();
        
    }//GEN-LAST:event_jButton_ApplyOptionsActionPerformed

    private void jButton_scanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_scanActionPerformed
        // TODO add your handling code here:
        startScan(); 
    }//GEN-LAST:event_jButton_scanActionPerformed

    private void jRadioButton_scanTCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_scanTCPActionPerformed
        // TODO add your handling code here:
        hb.setScanType(evt.getActionCommand()); 
    }//GEN-LAST:event_jRadioButton_scanTCPActionPerformed

    private void jRadioButton_scanUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_scanUDPActionPerformed
        // TODO add your handling code here:
        hb.setScanType(evt.getActionCommand());
    }//GEN-LAST:event_jRadioButton_scanUDPActionPerformed

    private void jButton_CancelOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelOptionsActionPerformed
        // TODO add your handling code here:
        jFrame_ScanOptions.setVisible(false);
    }//GEN-LAST:event_jButton_CancelOptionsActionPerformed

    private void jButton_NewCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_NewCancelActionPerformed
        // TODO add your handling code here:
        jFrame_NewProject.setVisible(false);
    }//GEN-LAST:event_jButton_NewCancelActionPerformed

    private void jButton_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_stopActionPerformed
        // TODO add your handling code here:
        killScan();
    }//GEN-LAST:event_jButton_stopActionPerformed

    private void jButton_scanMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_scanMousePressed
        // TODO add your handling code here: 
    }//GEN-LAST:event_jButton_scanMousePressed

    private void jToggleButton_optionsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jToggleButton_optionsPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton_optionsPropertyChange

    private void jMenuItem_afpHelperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_afpHelperActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getafpHelper());
    }//GEN-LAST:event_jMenuItem_afpHelperActionPerformed

    private void jMenuItem_bittorrentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_bittorrentActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getBittorrent());
    }//GEN-LAST:event_jMenuItem_bittorrentActionPerformed

    private void jMenuItem_bruteDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_bruteDriverActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getBruteDriver());
    }//GEN-LAST:event_jMenuItem_bruteDriverActionPerformed

    private void jMenuItem_bruteEngineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_bruteEngineActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getBruteEngine());
    }//GEN-LAST:event_jMenuItem_bruteEngineActionPerformed

    private void jMenuItem_CredToDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_CredToDBActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getCredtoDB());
    }//GEN-LAST:event_jMenuItem_CredToDBActionPerformed

    private void jMenuItem_CredToCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_CredToCSVActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getCredtoCSV());
    }//GEN-LAST:event_jMenuItem_CredToCSVActionPerformed

    private void jMenuItem_mssqlQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_mssqlQActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getMSSQLquery());
    }//GEN-LAST:event_jMenuItem_mssqlQActionPerformed

    private void jMenuItem_dhcp6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_dhcp6ActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getDHCP6());
    }//GEN-LAST:event_jMenuItem_dhcp6ActionPerformed

    private void jMenuItem_dnsQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_dnsQActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getDNSQuery());
    }//GEN-LAST:event_jMenuItem_dnsQActionPerformed

    private void jMenuItem_dnsBListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_dnsBListActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getDNSbl());
    }//GEN-LAST:event_jMenuItem_dnsBListActionPerformed

    private void jMenuItem_dnssdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_dnssdActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getDNSsd());
    }//GEN-LAST:event_jMenuItem_dnssdActionPerformed

    private void jMenuItem_drdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_drdaActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getDRDA());
    }//GEN-LAST:event_jMenuItem_drdaActionPerformed

    private void jMenuItem_EAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_EAPActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getEAP());
    }//GEN-LAST:event_jMenuItem_EAPActionPerformed

    private void jMenuItem_goipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_goipActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getGOIP());
    }//GEN-LAST:event_jMenuItem_goipActionPerformed

    private void jMenuItem_HTTPspiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_HTTPspiderActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getHTTPSpider());
    }//GEN-LAST:event_jMenuItem_HTTPspiderActionPerformed

    private void jMenuItem_imapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_imapActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getIMAP());
    }//GEN-LAST:event_jMenuItem_imapActionPerformed

    private void jMenuItem_informixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_informixActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getInformix());
    }//GEN-LAST:event_jMenuItem_informixActionPerformed

    private void jMenuItem_JDWPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_JDWPActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getJDWP());
    }//GEN-LAST:event_jMenuItem_JDWPActionPerformed

    private void jMenuItem_ncpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ncpActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getNCP());
    }//GEN-LAST:event_jMenuItem_ncpActionPerformed

    private void jMenuItem_nrpcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_nrpcActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getNRPC());
    }//GEN-LAST:event_jMenuItem_nrpcActionPerformed

    private void jMenuItem_opensslActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_opensslActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getOpenssl());
    }//GEN-LAST:event_jMenuItem_opensslActionPerformed

    private void jMenuItem_rpcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_rpcActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getRPC());
    }//GEN-LAST:event_jMenuItem_rpcActionPerformed

    private void jMenuItem_socketConnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_socketConnSendActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getSockConnect());
    }//GEN-LAST:event_jMenuItem_socketConnSendActionPerformed

    private void jMenuItem_tftpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_tftpActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getTftp());
    }//GEN-LAST:event_jMenuItem_tftpActionPerformed

    private void jMenuItem_xampActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_xampActionPerformed
        // TODO add your handling code here:
        pushCode(hb.getXamp());
    }//GEN-LAST:event_jMenuItem_xampActionPerformed

    private void jTree_NSEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree_NSEMouseClicked
        // TODO add your handling code here:
        try {
            if(evt.getClickCount()==2){
                TreePath tp = jTree_NSE.getClosestPathForLocation(evt.getX(), evt.getY());
                File f = (File)tp.getLastPathComponent();
                openTreeNode(f);
            }
        } catch (Exception e) {
            showMsg(null,"Error in opening file. Try again with valid file", "Error", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jTree_NSEMouseClicked

    private void jTree_NSEDATAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree_NSEDATAMouseClicked
        // TODO add your handling code here:
        try {
            if(evt.getClickCount()==2){
                TreePath tp = jTree_NSEDATA.getClosestPathForLocation(evt.getX(), evt.getY());
                File f = (File)tp.getLastPathComponent();
                openTreeNode(f);
            }
        } catch (Exception e) {
            showMsg(null,"Error in opening file. Try again with valid file", "Error", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jTree_NSEDATAMouseClicked

    private void jTree_NSELIBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree_NSELIBMouseClicked
        // TODO add your handling code here:
        try {
            if(evt.getClickCount()==2){
                TreePath tp = jTree_NSELIB.getClosestPathForLocation(evt.getX(), evt.getY());
                File f = (File)tp.getLastPathComponent();
                openTreeNode(f);
            }
        } catch (Exception e) {
            showMsg(null,"Error in opening file. Try again with valid file", "Error", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jTree_NSELIBMouseClicked

    private void jTabbedPane_workspaceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane_workspaceMousePressed
        // TODO add your handling code here:
        if(evt.isPopupTrigger()) jPopupMenu1.show(jTabbedPane_workspace,evt.getX(),evt.getY());
    }//GEN-LAST:event_jTabbedPane_workspaceMousePressed

    private void jTabbedPane_workspaceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane_workspaceMouseReleased
        // TODO add your handling code here:
        if(evt.isPopupTrigger()) jPopupMenu1.show(jTabbedPane_workspace,evt.getX(),evt.getY());
    }//GEN-LAST:event_jTabbedPane_workspaceMouseReleased

    private void jMenuItem_closeWorkSpaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_closeWorkSpaceActionPerformed
        // TODO add your handling code here:
        jTabbedPane_workspace.remove(jTabbedPane_workspace.getSelectedComponent());
    }//GEN-LAST:event_jMenuItem_closeWorkSpaceActionPerformed

    private void jMenuItem_closeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_closeAllActionPerformed
        // TODO add your handling code here:
        jTabbedPane_workspace.removeAll();
    }//GEN-LAST:event_jMenuItem_closeAllActionPerformed

    private void jMenuItem_findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_findActionPerformed
        // TODO add your handling code here:
        jFrame_searchBox.pack();
        jFrame_searchBox.setLocationRelativeTo(null);
        jFrame_searchBox.setVisible(true);
    }//GEN-LAST:event_jMenuItem_findActionPerformed

    private void jMenuItem_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_aboutActionPerformed
        // TODO add your handling code here:
        jFrame_About.pack();
        jFrame_About.setLocationRelativeTo(null);
        jFrame_About.setVisible(true);
    }//GEN-LAST:event_jMenuItem_aboutActionPerformed

    private void jButton_aboutCLOSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_aboutCLOSEActionPerformed
        // TODO add your handling code here:
        jFrame_About.setVisible(false);
    }//GEN-LAST:event_jButton_aboutCLOSEActionPerformed

    private void jButton_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_aboutActionPerformed
        // TODO add your handling code here:
        jFrame_About.pack();
        jFrame_About.setLocationRelativeTo(null);
        jFrame_About.setVisible(true);
    }//GEN-LAST:event_jButton_aboutActionPerformed

    private void jButton_editNSEPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_editNSEPathActionPerformed
        // TODO add your handling code here:
        jFileChooser1.setCurrentDirectory(new java.io.File("/"));
        jFileChooser1.setDialogTitle("Choose Nmap Executable");
        jFileChooser1.setFileSelectionMode(jFileChooser1.DIRECTORIES_ONLY);
        jFileChooser1.setMultiSelectionEnabled(false);
        int option = jFileChooser1.showOpenDialog(jFrame_Configure);
        if(option == jFileChooser1.APPROVE_OPTION){
            File f = jFileChooser1.getSelectedFile();
            jTextField_NSEPATH.setText(f.getAbsolutePath()); 
        }
    }//GEN-LAST:event_jButton_editNSEPathActionPerformed

    private void jButton_editLibPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_editLibPathActionPerformed
        // TODO add your handling code here:
        jFileChooser1.setCurrentDirectory(new java.io.File("/"));
        jFileChooser1.setDialogTitle("Choose Nmap Executable");
        jFileChooser1.setFileSelectionMode(jFileChooser1.DIRECTORIES_ONLY);
        jFileChooser1.setMultiSelectionEnabled(false);
        int option = jFileChooser1.showOpenDialog(jFrame_Configure);
        if(option == jFileChooser1.APPROVE_OPTION){
            File f = jFileChooser1.getSelectedFile();
            jTextField_LIBPATH.setText(f.getAbsolutePath()); 
        }
    }//GEN-LAST:event_jButton_editLibPathActionPerformed

    private void jTextField_NPATHPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField_NPATHPropertyChange
        // TODO add your handling code here:
       
      
    }//GEN-LAST:event_jTextField_NPATHPropertyChange

    private void jTextField_NSEPATHPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField_NSEPATHPropertyChange
        // TODO add your handling code here:
    
    }//GEN-LAST:event_jTextField_NSEPATHPropertyChange

    private void jTextField_LIBPATHPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField_LIBPATHPropertyChange
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextField_LIBPATHPropertyChange

    private void jTextField_NPATHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_NPATHActionPerformed
        // TODO add your handling code here:
          
    }//GEN-LAST:event_jTextField_NPATHActionPerformed

    private void jTextField_NPATHInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField_NPATHInputMethodTextChanged
        // TODO add your handling code here:
          
    }//GEN-LAST:event_jTextField_NPATHInputMethodTextChanged

    private void jFrame_ConfigureWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jFrame_ConfigureWindowGainedFocus
        // TODO add your handling code here:
       
        if(!jTextField_NPATH.getText().isEmpty() || !jTextField_NSEPATH.getText().isEmpty() || !jTextField_LIBPATH.getText().isEmpty()){
           jButton_applyConfig.setEnabled(true); 
          
        }
    }//GEN-LAST:event_jFrame_ConfigureWindowGainedFocus

    private void jMenuItem_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_stopActionPerformed
        // TODO add your handling code here:
        killScan();
    }//GEN-LAST:event_jMenuItem_stopActionPerformed

    private void jMenuItem_runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_runActionPerformed
        // TODO add your handling code here:
        startScan();
    }//GEN-LAST:event_jMenuItem_runActionPerformed

    private void jCheckBox_debugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_debugActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox_debugActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_scanType;
    private javax.swing.JButton jButton_ApplyOptions;
    private javax.swing.JButton jButton_CancelOptions;
    private javax.swing.JButton jButton_FindNext;
    private javax.swing.JButton jButton_NewCancel;
    private javax.swing.JButton jButton_NewCreate;
    private javax.swing.JButton jButton_NewNSEBrowse;
    private javax.swing.JButton jButton_about;
    private javax.swing.JButton jButton_aboutCLOSE;
    private javax.swing.JButton jButton_applyConfig;
    private javax.swing.JButton jButton_autoconfig;
    private javax.swing.JButton jButton_cancelConfig;
    private javax.swing.JButton jButton_clearconfig;
    private javax.swing.JButton jButton_close;
    private javax.swing.JButton jButton_copy;
    private javax.swing.JButton jButton_cut;
    private javax.swing.JButton jButton_editLibPath;
    private javax.swing.JButton jButton_editNSEPath;
    private javax.swing.JButton jButton_editNmapPath;
    private javax.swing.JButton jButton_find;
    private javax.swing.JButton jButton_new;
    private javax.swing.JButton jButton_open;
    private javax.swing.JButton jButton_paste;
    private javax.swing.JButton jButton_print;
    private javax.swing.JButton jButton_save;
    private javax.swing.JButton jButton_scan;
    private javax.swing.JButton jButton_settings;
    private javax.swing.JButton jButton_stop;
    private javax.swing.JButton jButton_undo;
    private javax.swing.JCheckBox jCheckBox_debug;
    private javax.swing.JCheckBox jCheckBox_matchcase;
    private javax.swing.JCheckBox jCheckBox_ptrace;
    private javax.swing.JCheckBox jCheckBox_regex;
    private javax.swing.JCheckBox jCheckBox_scriptargs;
    private javax.swing.JCheckBox jCheckBox_verbose;
    private javax.swing.JComboBox jComboBox_NewNSEService;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame_About;
    private javax.swing.JFrame jFrame_Configure;
    private javax.swing.JFrame jFrame_NewProject;
    private javax.swing.JFrame jFrame_ScanOptions;
    private javax.swing.JFrame jFrame_searchBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_Status;
    private javax.swing.JList jList_NewNSECateg;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_Close;
    private javax.swing.JMenuItem jMenuItem_CredToCSV;
    private javax.swing.JMenuItem jMenuItem_CredToDB;
    private javax.swing.JMenuItem jMenuItem_EAP;
    private javax.swing.JMenuItem jMenuItem_Exit;
    private javax.swing.JMenuItem jMenuItem_HTTPspider;
    private javax.swing.JMenuItem jMenuItem_JDWP;
    private javax.swing.JMenuItem jMenuItem_New;
    private javax.swing.JMenuItem jMenuItem_Open;
    private javax.swing.JMenuItem jMenuItem_Save;
    private javax.swing.JMenuItem jMenuItem_SaveAs;
    private javax.swing.JMenuItem jMenuItem_about;
    private javax.swing.JMenuItem jMenuItem_afpHelper;
    private javax.swing.JMenuItem jMenuItem_bittorrent;
    private javax.swing.JMenuItem jMenuItem_bruteDriver;
    private javax.swing.JMenuItem jMenuItem_bruteEngine;
    private javax.swing.JMenuItem jMenuItem_closeAll;
    private javax.swing.JMenuItem jMenuItem_closeWorkSpace;
    private javax.swing.JMenuItem jMenuItem_configure;
    private javax.swing.JMenuItem jMenuItem_copy;
    private javax.swing.JMenuItem jMenuItem_cut;
    private javax.swing.JMenuItem jMenuItem_dhcp6;
    private javax.swing.JMenuItem jMenuItem_dnsBList;
    private javax.swing.JMenuItem jMenuItem_dnsQ;
    private javax.swing.JMenuItem jMenuItem_dnssd;
    private javax.swing.JMenuItem jMenuItem_drda;
    private javax.swing.JMenuItem jMenuItem_find;
    private javax.swing.JMenuItem jMenuItem_goip;
    private javax.swing.JMenuItem jMenuItem_imap;
    private javax.swing.JMenuItem jMenuItem_informix;
    private javax.swing.JMenuItem jMenuItem_mssqlQ;
    private javax.swing.JMenuItem jMenuItem_ncp;
    private javax.swing.JMenuItem jMenuItem_nrpc;
    private javax.swing.JMenuItem jMenuItem_openssl;
    private javax.swing.JMenuItem jMenuItem_paste;
    private javax.swing.JMenuItem jMenuItem_print;
    private javax.swing.JMenuItem jMenuItem_rpc;
    private javax.swing.JMenuItem jMenuItem_run;
    private javax.swing.JMenuItem jMenuItem_socketConnSend;
    private javax.swing.JMenuItem jMenuItem_stop;
    private javax.swing.JMenuItem jMenuItem_tftp;
    private javax.swing.JMenuItem jMenuItem_undo;
    private javax.swing.JMenuItem jMenuItem_xamp;
    private javax.swing.JMenu jMenu_Edit;
    private javax.swing.JMenu jMenu_File;
    private javax.swing.JMenu jMenu_Help;
    private javax.swing.JMenu jMenu_Proj;
    private javax.swing.JMenu jMenu_codegen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel_status;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JProgressBar jProgressBar_status;
    private javax.swing.JRadioButton jRadioButton_scanTCP;
    private javax.swing.JRadioButton jRadioButton_scanUDP;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JSplitPane jSplitPane_workpane;
    private javax.swing.JSplitPane jSplitPane_workspace;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane_workspace;
    private javax.swing.JTextArea jTextArea_NewNSEDesc;
    private javax.swing.JTextArea jTextArea_output;
    private javax.swing.JTextField jTextField_LIBPATH;
    private javax.swing.JTextField jTextField_NPATH;
    private javax.swing.JTextField jTextField_NSEPATH;
    private javax.swing.JTextField jTextField_NewNSEAuthor;
    private javax.swing.JTextField jTextField_NewNSEName;
    private javax.swing.JTextField jTextField_host;
    private javax.swing.JTextField jTextField_port;
    private javax.swing.JTextField jTextField_scriptargs;
    private javax.swing.JTextField jTextField_searchItem;
    private javax.swing.JToggleButton jToggleButton_options;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JTree jTree_NSE;
    private javax.swing.JTree jTree_NSEDATA;
    private javax.swing.JTree jTree_NSELIB;
    // End of variables declaration//GEN-END:variables

    
    // user defined variables
    HalcyonBean hb = new HalcyonBean();
    public RSyntaxTextArea codearea;
    private UndoManager undoManager;
    CommandExecutionHandler cmdHandler;
    private Task task;
    
    // user defined functions
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/halcyon/icons/halcyon-logo.png")));
        
    }

    private void Configure() {
        File conf = new File("halcyon.settings");
        if (conf.exists()) { 
            //Setup the main panel
            Properties prop = new Properties();
            InputStream in = null;
            try {
                in = new FileInputStream("halcyon.settings");
                prop.load(in);
                jTree_NSE.setModel(new FileSystemModel(new File(prop.getProperty("NSEPATH"))));
                jTree_NSEDATA.setModel(new FileSystemModel(new File((prop.getProperty("LIBPATH")+"data"))));
                jTree_NSELIB.setModel(new FileSystemModel(new File(prop.getProperty("LIBPATH"))));
            } catch (Exception e) {
                
            }
        }else{
            String msg = "<html>Classpath is not configured. Halcyon will not work as desired without this configuration. <br>Click Yes to configure now or No to quit.</html>";
            String title = "Configuration Missing";
            
             int configCheck = JOptionPane.showConfirmDialog(null, msg, title, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
             if(configCheck == JOptionPane.YES_OPTION){
                 configNow();
             }else if(configCheck == JOptionPane.NO_OPTION){
                 System.exit(0);
             }else{
                 System.exit(0);
             }
        }
    }
    
    private int showMsg(Component comp,String msg, String title, int jOption){
        //String msg = "<html>Classpath is not configured. Halcyon will not work as desired without this configuration. <br>Click OK to configure now.</html>";
        //String title = "Configuration Missing";
            
             int done = JOptionPane.showConfirmDialog(comp, msg, title, jOption, JOptionPane.WARNING_MESSAGE);
             
             return done;
             /*
             if(done == JOptionPane.YES_OPTION){
                 
             }else if(done == JOptionPane.NO_OPTION){
                 System.exit(0);
             }else{
                 System.exit(0);
             }
             */
    }
    
    private void configNow(){
        jFrame_Configure.setVisible(true);
    }
    
    private void setProperties(String npath, String nse, String lib){
        Properties prop = new Properties();
        OutputStream out = null;
        try {
            out = new FileOutputStream("halcyon.settings");
            prop.setProperty("Halcyon Version", "2.0");
            prop.setProperty("NPATH", npath);
            prop.setProperty("NSEPATH", nse);
            prop.setProperty("LIBPATH", lib);
            prop.store(out, null);
        } catch (Exception e) {
            showMsg(jFrame_Configure,"Error in configuration. Please try again", "Configuration Error!",JOptionPane.OK_OPTION);
        }
    }
    
    private void loadSettings(){
        Properties prop = new Properties();
        InputStream in = null;
        try {
            in = new FileInputStream("halcyon.settings");
            prop.load(in);
            jTextField_NPATH.setText(prop.getProperty("NPATH"));
            jTextField_NSEPATH.setText(prop.getProperty("NSEPATH"));
            jTextField_LIBPATH.setText(prop.getProperty("LIBPATH"));
        } catch (Exception e) {
            showMsg(null,"Error in configuration. Please configure correctly and restart Halcyon.", "Configuration Error", JOptionPane.PLAIN_MESSAGE);
        }
    }

    private void createNew(StringBuilder sb) {
        try{ 
            codearea = new RSyntaxTextArea();

            undoManager = new UndoManager();
            codearea.getDocument().addUndoableEditListener(undoManager);
            
            codearea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_LUA);
            codearea.setCodeFoldingEnabled(true);
            codearea.setAntiAliasingEnabled(true);
            CompletionProvider provider = createCompletionProvider();
            AutoCompletion ac = new AutoCompletion(provider);
            ac.install(codearea);
            codearea.setText(sb.toString());
            RTextScrollPane codePane = new RTextScrollPane(codearea);
            File f = hb.getFile();
            jTabbedPane_workspace.add(f.getAbsolutePath(),codePane);
            codearea.getDocument().addDocumentListener(new MyDocumentListener(jTabbedPane_workspace,jLabel_Status));
            jTabbedPane_workspace.setSelectedIndex(jTabbedPane_workspace.getTabCount()-1);
        }catch(Exception e){
            showMsg(jFrame_NewProject,"Can not create the file. Please try again", "Error", JOptionPane.OK_OPTION);
        }
            
    }
    
    

    private CompletionProvider createCompletionProvider() {

      DefaultCompletionProvider provider = new DefaultCompletionProvider();

      // common keywords
      String[] keyword1 = {"and", "break", "do", "else", "elseif", "end", "false", "for", "function", "goto", "if", "in", "local", "nil", "not", "or", "repeat", "return", "then", "true", "until", "while", "_ENV", "_G", "_VERSION", "assert", "collectgarbage", "dofile", "error", "getfenv", "getmetatable", "ipairs", "load", "loadfile", "loadstring", "module", "next", "pairs", "pcall", "print", "rawequal", "rawget", "rawlen", "rawset", "require", "select", "setfenv", "setmetatable", "tonumber", "tostring", "type", "unpack", "xpcall", "string", "table", "math", "bit32", "coroutine", "io", "os", "debug", "package", "__index", "__newindex", "__call", "__add", "__sub", "__mul", "__div", "__mod", "__pow", "__unm", "__concat", "__len", "__eq", "__lt", "__le", "__gc", "__mode", "byte", "char", "dump", "find", "format", "gmatch", "gsub", "len", "lower", "match", "rep", "reverse", "sub", "upper", "abs", "acos", "asin", "atan", "atan2", "ceil", "cos", "cosh", "deg", "exp", "floor", "fmod", "frexp", "ldexp", "log", "log10", "max", "min", "modf", "pow", "rad", "random", "randomseed", "sin", "sinh", "sqrt", "tan", "tanh", "arshift", "band", "bnot", "bor", "btest", "bxor", "extract", "lrotate", "lshift", "replace", "rrotate", "rshift", "shift", "string.byte", "string.char", "string.dump", "string.find", "string.format", "string.gmatch", "string.gsub", "string.len", "string.lower", "string.match", "string.rep", "string.reverse", "string.sub", "string.upper", "table.concat", "table.insert", "table.maxn", "table.pack", "table.remove", "table.sort", "table.unpack", "math.abs", "math.acos", "math.asin", "math.atan", "math.atan2", "math.ceil", "math.cos", "math.cosh", "math.deg", "math.exp", "math.floor", "math.fmod", "math.frexp", "math.huge", "math.ldexp", "math.log", "math.log10", "math.max", "math.min", "math.modf", "math.pi", "math.pow", "math.rad", "math.random", "math.randomseed", "math.sin", "math.sinh", "math.sqrt", "math.tan", "math.tanh", "bit32.arshift", "bit32.band", "bit32.bnot", "bit32.bor", "bit32.btest", "bit32.bxor", "bit32.extract", "bit32.lrotate", "bit32.lshift", "bit32.replace", "bit32.rrotate", "bit32.rshift", "close", "flush", "lines", "read", "seek", "setvbuf", "write", "clock", "date", "difftime", "execute", "exit", "getenv", "remove", "rename", "setlocale", "time", "tmpname", "coroutine.create", "coroutine.resume", "coroutine.running", "coroutine.status", "coroutine.wrap", "coroutine.yield", "io.close", "io.flush", "io.input", "io.lines", "io.open", "io.output", "io.popen", "io.read", "io.tmpfile", "io.type", "io.write", "io.stderr", "io.stdin", "io.stdout", "os.clock", "os.date", "os.difftime", "os.execute", "os.exit", "os.getenv", "os.remove", "os.rename", "os.setlocale", "os.time", "os.tmpname", "debug.debug", "debug.getfenv", "debug.gethook", "debug.getinfo", "debug.getlocal", "debug.getmetatable", "debug.getregistry", "debug.getupvalue", "debug.getuservalue", "debug.setfenv", "debug.sethook", "debug.setlocal", "debug.setmetatable", "debug.setupvalue", "debug.setuservalue", "debug.traceback", "debug.upvalueid", "debug.upvaluejoin", "package.cpath", "package.loaded", "package.loaders", "package.loadlib", "package.path", "package.preload", "package.seeall"};
      String[] keyword2 = {"description","@usage","@output","PORT","STATE","SERVICE","REASON", "require","portrule","shortport","stdnse","registry"};
      String[] keywords = new String[keyword1.length+keyword2.length];
      System.arraycopy(keyword1, 0, keywords, 0, keyword1.length);
      System.arraycopy(keyword2, 0, keywords, keyword1.length, keyword2.length);
      
      Hashtable ht = new Hashtable();
      ht.put("echo", "echo( )"); 
      ht.put("descr", "description = [[ ]]");
      ht.put("categ", "categories =  { }");
      ht.put("require", "require \" \" ");
      ht.put("acl_group", "acl_group_to_long_string ( )");
      ht.put("acls_to", "acls_to_long_string ()");
      ht.put("porthttprule", "portrule = shortport.http");
      ht.put("port", "portrule = shortport.port_or_service (port, \"service\", {\"tcp\"})");
      ht.put("stdout", "stdnse.format_output(true, response)");
      ht.put("portaction", "portaction = function(host, port)\\nend");
      ht.put("hostaction", "hostaction = function(host)\\nend");
      ht.put("preaction", "preaction = function()\\nend");
      ht.put("postaction", "postaction = function()\\nend");
      ht.put("action", "action = function( host, port )");
      
      
      
      // Add auto completions for all possible LUA keywords. 
      for(String keyword:keywords){
          provider.addCompletion(new BasicCompletion(provider, keyword));
      }
       
      
      // Adding some "shorthand" completions. You can use ctrl+space to get this
      Enumeration e = ht.keys();  
      while (e.hasMoreElements()) {
            String key = (String) e.nextElement();
            String val = (String) ht.get(key);
            provider.addCompletion(new ShorthandCompletion(provider, key, val, val));
            
      }
       
      return provider;

   }
    
   public void openScript(){
       File scriptFile = null;
        String line = null;
        
        codearea = new RSyntaxTextArea();
        
        codearea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_LUA);
        codearea.setCodeFoldingEnabled(true);
        codearea.setAntiAliasingEnabled(true);
        CompletionProvider provider = createCompletionProvider();
        AutoCompletion ac = new AutoCompletion(provider);
        ac.install(codearea);
        
        
        try{
            jFileChooser1.setCurrentDirectory(new java.io.File("/"));
            jFileChooser1.setDialogTitle("Open Script");
            jFileChooser1.setMultiSelectionEnabled(false);
            
            int option = jFileChooser1.showOpenDialog(this);
            if(option == jFileChooser1.APPROVE_OPTION){
                scriptFile = new File(jFileChooser1.getSelectedFile().getAbsolutePath());
                
                BufferedReader br = new BufferedReader(new FileReader(scriptFile));
                while((line = br.readLine())!= null){
                    codearea.setText(codearea.getText()+"\n"+line);
                }
            }
            RTextScrollPane codePane = new RTextScrollPane(codearea);
            jTabbedPane_workspace.add(scriptFile.getAbsolutePath(),codePane);
            codearea.getDocument().addDocumentListener(new MyDocumentListener(jTabbedPane_workspace,jLabel_Status));
            jTabbedPane_workspace.setSelectedIndex(jTabbedPane_workspace.getTabCount()-1);
            
        }catch(Exception e){
            showMsg(null,"Wrong File Selected", "Error!",JOptionPane.OK_OPTION);
        }
        
       
       
        
   }
   
   public void saveScript(){
        try{
            JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
            JTextArea area = (JTextArea)scroll.getViewport().getView();

            String scriptCode = area.getText();
            String scriptName = jTabbedPane_workspace.getTitleAt(jTabbedPane_workspace.getSelectedIndex());
            
            File scriptFile = new File(scriptName);
            try{
                    FileWriter fw = new FileWriter(scriptFile.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(scriptCode);
                    bw.close();

                codearea.getDocument().addDocumentListener(new MyDocumentListener(jTabbedPane_workspace,jLabel_Status));
                jTabbedPane_workspace.setTitleAt(jTabbedPane_workspace.getSelectedIndex(), scriptName);

                jLabel_Status.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
                jLabel_Status.setForeground(new java.awt.Color(0, 0, 0));
                jLabel_Status.setText(jLabel_Status.getText().replace("Unsaved: ", ""));
                
            }catch(Exception e){
                showMsg(null,"Limited File Permission on the selected directory.","Permission Denied",JOptionPane.OK_OPTION);

            }
        }catch(Exception e){
            showMsg(null,"No acive script found.\nPlease create a new script and try again","Error",JOptionPane.OK_OPTION);

        }
    }
 
   
    
    //save script
    private void saveAS(){
        
        try{
            JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
            JTextArea area = (JTextArea)scroll.getViewport().getView();

            String scriptCode = area.getText();
            String scriptName = jTabbedPane_workspace.getTitleAt(jTabbedPane_workspace.getSelectedIndex());
            File scriptFile = null;

            try{
                jFileChooser1.setCurrentDirectory(new java.io.File("/"));
                jFileChooser1.setDialogTitle("Save Script");

                jFileChooser1.setMultiSelectionEnabled(false);
                int option = jFileChooser1.showSaveDialog(this);
                if(option == jFileChooser1.APPROVE_OPTION){
                    scriptFile = new File(jFileChooser1.getSelectedFile().getAbsolutePath());
                    if(!scriptFile.exists()){
                        scriptFile.createNewFile();
                    }
                    FileWriter fw = new FileWriter(scriptFile.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(scriptCode);
                    bw.close();
                }
                codearea.getDocument().addDocumentListener(new MyDocumentListener(jTabbedPane_workspace,jLabel_Status));
                jTabbedPane_workspace.setTitleAt(jTabbedPane_workspace.getSelectedIndex(), scriptFile.getAbsolutePath());
                jTabbedPane_workspace.setToolTipTextAt(jTabbedPane_workspace.getSelectedIndex(), scriptFile.getAbsolutePath());
                
                jLabel_Status.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
                jLabel_Status.setForeground(new java.awt.Color(0, 0, 0));
                jLabel_Status.setText(jLabel_Status.getText().replace("Unsaved: ", ""));
                
            }catch(Exception e){
                showMsg(null,"Limited File Permission on the selected directory.","Permission Denied",JOptionPane.OK_OPTION);

            }
        }catch(Exception e){
            showMsg(null,"No acive script found.\nPlease create a new script and try again","Error",JOptionPane.OK_OPTION);

        }
    }
    
    public void printScript(){
        try {
            JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
            JTextArea area = (JTextArea)scroll.getViewport().getView();
            boolean done = area.print();
            if(done){
                showMsg(null,"Printing Finished", "Information",JOptionPane.INFORMATION_MESSAGE);
            }else{
                showMsg(null, "Printing in Progress.", "Print",JOptionPane.PLAIN_MESSAGE);
            } 
        } catch (Exception e) {
            showMsg(null, "Printing Failed. Try again.", "Print Script",JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    public void findText(boolean next){
        boolean found;
        try {
            if(jTabbedPane_workspace.getSelectedComponent()!=null){
                JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
                JTextArea area = (JTextArea)scroll.getViewport().getView();
                SearchContext search = new SearchContext();
                String text = jTextField_searchItem.getText();
                if(text.length()==0){
                    return;
                }
                search.setSearchFor(text);
                search.setMatchCase(jCheckBox_matchcase.isSelected());
                search.setRegularExpression(jCheckBox_regex.isSelected());
                search.setSearchForward(next);
                search.setWholeWord(false);
                 
                found = SearchEngine.find(area, search);
                
                if (!found) {
                        JOptionPane.showMessageDialog(this, "Text not found");
                }
            }else{
                showMsg(jFrame_searchBox,"Error", "No File Opened. Open a file or create new before search for something.", JOptionPane.OK_OPTION);
            }
            
        } catch (Exception e) {
        }
    }

    private void showOptions() {
        jFrame_ScanOptions.pack();
        jFrame_ScanOptions.setLocationRelativeTo(null);
        jFrame_ScanOptions.setVisible(true);
    }

    private void setOptions() {
        if(jCheckBox_scriptargs.isSelected() && jTextField_scriptargs.getText().isEmpty()){
            showMsg(jFrame_Configure,"Script Argument is empty", "Warning", JOptionPane.PLAIN_MESSAGE); 
        }else{ 
            hb.setScriptArgs(jTextField_scriptargs.getText(), jCheckBox_scriptargs.isSelected());
            hb.setDebug(jCheckBox_debug.isSelected());
            hb.setPtrace(jCheckBox_ptrace.isSelected());
            hb.setVerbose(jCheckBox_verbose.isSelected());
            if(jRadioButton_scanUDP.isSelected()){
                hb.setScanType("UDP Scan");
            } 
            jFrame_ScanOptions.setVisible(false);
        } 
        
    }

    private void pushCode(String code) {
        try{
            JScrollPane scroll = (JScrollPane)jTabbedPane_workspace.getSelectedComponent();
            JTextArea area = (JTextArea)scroll.getViewport().getView();
            int pos = area.getCaretPosition();
            area.insert(code, pos);
        }catch(Exception e){
            showMsg(null,"Can not generate code. Try Again", "Code Generation Failed.", JOptionPane.PLAIN_MESSAGE);
        }
    }

    private void openTreeNode(File f) {
        File scriptFile = null;
        String line = null;
        
        codearea = new RSyntaxTextArea();
        
        codearea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_LUA);
        codearea.setCodeFoldingEnabled(true);
        codearea.setAntiAliasingEnabled(true);
        CompletionProvider provider = createCompletionProvider();
        AutoCompletion ac = new AutoCompletion(provider);
        ac.install(codearea);
        
        try{
            BufferedReader br = new BufferedReader(new FileReader(f));
            while((line = br.readLine())!= null){
                codearea.setText(codearea.getText()+"\n"+line);
            }
            RTextScrollPane codePane = new RTextScrollPane(codearea);
            jTabbedPane_workspace.add(f.getAbsolutePath(),codePane);
            //jTabbedPane_workspace.setTitleAt(jTabbedPane_workspace.getTitleAt(jTabbedPane_workspace.gets)+"*");
            codearea.getDocument().addDocumentListener(new MyDocumentListener(jTabbedPane_workspace,jLabel_Status)); 
            jTabbedPane_workspace.setSelectedIndex(jTabbedPane_workspace.getTabCount()-1);
        }catch(Exception e){
             
        }
        
    }

    private void killScan() {
        jProgressBar_status.setIndeterminate(false);
        cmdHandler.killProcess();
        jTextArea_output.setText(jTextArea_output.getText()+"========= Scannig Terminated by User =========\r\n");
    }

    private void startScan() {
        if(jTabbedPane_workspace.getSelectedComponent()!=null){
            if(hb.getIsOptions()){
                jProgressBar_status.setIndeterminate(true);
                task = new Task(); 
                task.execute();
            }else{
                int sel = JOptionPane.showConfirmDialog(this, "<html>Scan Options are not selected. Running scans with scan options not selected will skip <br>extra settings such as debugging, script arguments, and other options. <br>Do you want to continue ?<html>","Scan Options are not set.",JOptionPane.YES_NO_OPTION);
                if(sel == JOptionPane.YES_OPTION){
                    jProgressBar_status.setIndeterminate(true);
                    task = new Task(); 
                    task.execute();
                } 
            }
        }else{
            showMsg(null,"No script found in the current workspace", "Error", JOptionPane.PLAIN_MESSAGE);
        }
    }
 

    class Task extends SwingWorker<Void, Void> {
    /*
     * Main task. Executed in background thread.
     */
    @Override
    public Void doInBackground() {
      String host,port,fpath,fname,nmap; 
        StringBuilder output = null;
        Properties prop = new Properties(); 
        InputStream in;
        java.util.List<String> cmd = new ArrayList<String>(); 
        
        if(jLabel_Status.getText().contains("Unsaved: ")){
            saveScript(); 
        }
        try {
                host = getValidTarget(jTextField_host.getText().trim());
                port = getValidPort(jTextField_port.getText().trim());
                File f = new File(hb.getPath());
                fpath = f.getParent();
                fname = f.getName();
                if(!host.isEmpty() || host!=null || port !=null){
                    jTextArea_output.setText("");
                    
                    //get the classpath and binaries
                    in = new FileInputStream("halcyon.settings");
                    prop.load(in);
                    nmap = prop.getProperty("NPATH");
                    
                    // command building 
                    cmd.add(nmap);
                    if(hb.getScanType().equals("UDP Scan")){
                        cmd.add("-sU");
                    }
                    cmd.add(host);
                    if(!port.equals("default")){
                        cmd.add("-p "+port);
                    }
                    
                    cmd.add("--script="+ f.getName());
                    cmd.add("--datadir=\""+f.getParent().toString().trim()+"\"");
                    if(hb.isScriptArg()){
                       
                        cmd.add("--script-args=\""+hb.getScriptArgs().trim()+"\"");
                    }
                    if(hb.getPtrace()){
                        cmd.add("--packet-trace");
                    }
                    if(hb.getVerbose()){
                        cmd.add("-vv");
                    }
                    if(hb.getDebug()){
                        cmd.add("-d");
                    }
                    jTextArea_output.setText("========== Execution Started =========\r\n");
                    cmdHandler = new CommandExecutionHandler(cmd);
                    jTextArea_output.setText(jTextArea_output.getText()+"\r\n"+cmdHandler.executeCommand());
                    jTextArea_output.setText(jTextArea_output.getText()+"========== Execution Finished =========\r\n");
                    
                }else{
                    showMsg(null,"Invalid host or port", "Warning", JOptionPane.PLAIN_MESSAGE);
                }
                
            } catch (Exception e) {
                showMsg(null,"Script failed to execute. This could be due to halcyon misconfiguration. Try again after configuring it properly.", "Script Failed", JOptionPane.PLAIN_MESSAGE);
                
            }
      return null;
    }

    /*
     * Executed in event dispatching thread
     */
    @Override
    public void done() {
      Toolkit.getDefaultToolkit().beep();
      jProgressBar_status.setIndeterminate(false);
      setCursor(null); // turn off the wait cursor 
    }
  }
    
    private static String getValidTarget(String ip){
        final String DOMAIN_NAME_PATTERN = "^[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$";
        
        /* Explaination
         
        ^			#  start of the line
        [A-Za-z0-9-]+           #  start with the string in the brackets [ ], must contain one or more (+)
        (			#  start of group #1 - For sub-domain.
        \\.[A-Za-z0-9-]+        #  follow by a dot "." and string in the brackets [ ], must contain one or more (+)
        )*                      #  end of group #1, this group is optional (*)
        (			#  start of group #2 - check the extension
        \\.[A-Za-z]{2,}         #  follow by a dot "." and string in the brackets [ ], with minimum length of 2
        )			#  end of group #2
        $			#  end of the line
        
        */
        
        if (ip == null || ip.isEmpty()) return null;
        ip = ip.trim();
        try{
            Pattern pattern = Pattern.compile(DOMAIN_NAME_PATTERN);
            Matcher matcher = pattern.matcher(ip);
            if(matcher.matches()) return ip;
            else return getValidIPAddress(ip);
        }catch(Exception e){
            return null;
        }
    }
    
    private static String getValidIPAddress(String ip){
        final String IPADDRESS_PATTERN = 
		"^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
        
        /*
        
        ^		#start of the line
        (		#  start of group #1
        [01]?\\d\\d?    #    Can be one or two digits. If three digits appear, it must start either 0 or 1
                	#    e.g ([0-9], [0-9][0-9],[0-1][0-9][0-9])
        |		#    ...or
        2[0-4]\\d	#    start with 2, follow by 0-4 and end with any digit (2[0-4][0-9]) 
        |               #    ...or
        25[0-5]         #    start with 2, follow by 5 and ends with 0-5 (25[0-5]) 
        )		#  end of group #2
        \.              #  follow by a dot "."
        ....            # repeat with 3 times (3x)
        $		#end of the line
        
        
        */
        
        
        //if (ip == null || ip.isEmpty()) return false;
        ip = ip.trim();
        if ((ip.length() < 6) & (ip.length() > 15)) return null;
        try{
            Pattern pattern = Pattern.compile(IPADDRESS_PATTERN);
            Matcher matcher = pattern.matcher(ip);
            if(matcher.matches()) return ip;
            else return null;
        }catch(Exception e){
            return null;
        }
        
    }
    
    private String getValidPort(String port){
        String valid = null;
        int x;
        if (port == null || port.isEmpty()) return null;
        port = port.trim();
        if(port.matches("-?\\d+")){
            try{
                int PORT = Integer.parseInt(port);
                if(PORT < 0 || PORT > 65535){
                    return null;
                }else{
                    valid = port;
                }
            }catch(Exception e){
               
            }
        }else{
            if(port.toLowerCase().equals("default")){
                valid = "default";
            }else if(port.toLowerCase().equals("ftp")){
                valid = "21";
            }else if(port.toLowerCase().equals("ssh")){
                valid = "22";
            }else if(port.toLowerCase().equals("telnet")){
                valid = "23";
            }else if(port.toLowerCase().equals("smtp")){
                valid = "25";
            }else if(port.toLowerCase().equals("dns")){
                valid = "53";
            }else if(port.toLowerCase().equals("tftp")){
                valid = "69";
            }else if(port.toLowerCase().equals("finger")){
                valid = "79";
            }else if(port.toLowerCase().equals("http")){
                valid = "80";
            }else if(port.toLowerCase().equals("ntp")){
                valid="123";
            }else if(port.toLowerCase().equals("snmp")){
                valid="161";
            }else if(port.toLowerCase().equals("https")){
                valid = "443";
            }else if(port.toLowerCase().equals("rlogin")){
                valid = "513";
            }else if(port.toLowerCase().equals("rsh")){
                valid = "514";
            }else if(port.toLowerCase().equals("citrix")){
                valid = "1494";
            }else if(port.toLowerCase().equals("sybase")){
                valid = "1498";
            }else if(port.toLowerCase().equals("oracle")){
                valid = "1521";
            }else if(port.toLowerCase().equals("mysql")){
                valid = "3306";
            }else if(port.toLowerCase().equals("rdp")){
                valid = "3389";
            }else{
                try {
                    x = Integer.parseInt(port);
                    if(x>0 && x<65535){
                        return Integer.toString(x);
                    }
                } catch (Exception e) {
                    return null;
                }
            }
            
        }
        return valid;
    }
    
}

class MyDocumentListener implements DocumentListener{
    
    JLabel status;
    public MyDocumentListener(JTabbedPane t, JLabel status) {
       
        this.status=status;
        
    }
    
    public void insertUpdate(DocumentEvent de){
        
        if(!status.getText().contains("Unsaved:")){
            status.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
            status.setForeground(new java.awt.Color(255, 11, 21));

            status.setText("Unsaved: "+status.getText());
        }
       
    }
    
    
   
    public void removeUpdate(DocumentEvent e) {
        if(!status.getText().contains("Unsaved")){
            status.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
            status.setForeground(new java.awt.Color(255, 11, 21));

            status.setText("Unsaved: "+status.getText());
        }
    }

    
    public void changedUpdate(DocumentEvent e) {
        if(!status.getText().contains("Unsaved")){
            status.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
            status.setForeground(new java.awt.Color(255, 11, 21));

            status.setText("Unsaved: "+status.getText());
        }
    }
    
}
